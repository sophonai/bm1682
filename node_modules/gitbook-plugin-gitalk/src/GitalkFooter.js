const path = require('path');
const GitBook = require('gitbook-core');
const Gitalk = require('gitalk');
const { React, Immutable } = GitBook;

/**
 * Footer for a page with disqus comment.
 * @type {[type]}
 */
const GitalkFooter = React.createClass({
  propTypes: {
    page:              GitBook.PropTypes.Page,
    clientID:         React.PropTypes.string.isRequired,
    clientSecret:     React.PropTypes.string.isRequired,
    repo: React.PropTypes.string.isRequired,
    owner: React.PropTypes.string.isRequired,
  },

  componentDidMount() {
    console.log(111);
    const { page, clientID, clientSecret, repo, owner } = this.props;

    const gitalk = new Gitalk({
      clientID: clientID,
      clientSecret:AclientSecret,
      repo: repo,
      owner: owner,
      admin: [owner],
      id: page.permalink,
      distractionFreeMode: false
    });
    gitalk.render('gitalk-container');
  },

  componentDidUpdate(prevProps) {
    // const { location: prevLocation } = prevProps;
    const { page, clientID, clientSecret, repo, owner } = this.props;

    // const hasChanged = !prevLocation.delete('hash').equals(location.delete('hash'));
    // if (hasChanged) {
      const gitalk = new Gitalk({
        clientID: clientID,
        clientSecret:AclientSecret,
        repo: repo,
        owner: owner,
        admin: [owner],
        id: page.permalink,
        distractionFreeMode: false
      });
      gitalk.render('gitalk-container');
    // }
  },

  render() {
    // const { page, clientID, clientSecret, repo, owner } = this.props;
    // 
    // const pageConfig = page.attributes.get('permalink', Immutable.Map());
    // 
    // if (pageConfig === "" || pageConfig.get('enabled') === false) {
    //   return null;
    // }

    return (
        <GitBook.Panel>
        <div id="gitalk-container"></div>
        </GitBook.Panel>
    );
  }
});

function mapStateToProps({ config, file, page, languages }) {
  const pluginConfig = config.getForPlugin('gitalk');

  return {
    page,
    clientID: pluginConfig.get('clientID'),
    clientSecret: pluginConfig.get('clientSecret'),
    repo: pluginConfig.get('repo'),
    owner: pluginConfig.get('owner')
  };
}

module.exports = GitBook.connect(GitalkFooter, mapStateToProps);
